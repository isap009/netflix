{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"E:/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"E:/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from\"./axios\";import\"./Row.css\";import Youtube from\"react-youtube\";import movieTrailer from\"movie-trailer\";var baseURL=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchURL=_ref.fetchURL,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerURL=_useState4[0],setTrailerURL=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchURL);case 2:request=_context.sent;//    console.log(request)\nsetMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchURL]);var opts={height:'390',width:'100%',playerVars:{// https://developers.google.com/youtube/player_parameters\nautoplay:1}};var handleClick=function handleClick(movie){if(trailerURL){setTrailerURL(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerURL(urlParams.get('v'));console.log(urlParams);}).catch(function(err){return console.log(err);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h1\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters \".concat(isLargeRow&&\"row_poster_large\"),children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{className:\"row-poster\",onClick:function onClick(){handleClick(movie);},src:\"\".concat(baseURL).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name});})}),trailerURL&&/*#__PURE__*/_jsx(Youtube,{videoId:trailerURL,opts:opts})]});}export default Row;","map":{"version":3,"sources":["E:/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","baseURL","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerURL","setTrailerURL","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","err","map","poster_path","backdrop_path"],"mappings":"0eAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAAyBC,SAAzB,KAA0C,OAA1C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CACA,GAAMC,CAAAA,OAAO,CAAC,sCAAd,CACA,QAASC,CAAAA,GAAT,MAA0C,IAA5BC,CAAAA,KAA4B,MAA5BA,KAA4B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAbC,UAAa,MAAbA,UAAa,eACVT,QAAQ,CAAC,EAAD,CADE,wCAC/BU,MAD+B,eACvBC,SADuB,8BAEFX,QAAQ,CAAC,EAAD,CAFN,yCAE/BY,UAF+B,eAEnBC,aAFmB,eAGrCZ,SAAS,CAAC,UAAM,SACCa,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACUQ,OADV,eAEC;AACGL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAHJ,gCAIWF,OAJX,wDADc,4CAOdF,SAAS,GAEX,CATS,CASP,CAACN,QAAD,CATO,CAAT,CAUD,GAAMW,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAE,KADC,CAETC,KAAK,CAAE,MAFE,CAGTC,UAAU,CAAE,CACV;AACAC,QAAQ,CAAE,CAFA,CAHH,CAAb,CAQE,GAAMC,CAAAA,WAAW,CAAC,QAAZA,CAAAA,WAAY,CAACC,KAAD,CAAS,CAEvB,GAAGb,UAAH,CAAc,CACVC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAGI,CACAT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACCC,IADD,CACM,SAACC,GAAD,CAAO,CACX,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAnB,aAAa,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CACAkB,OAAO,CAACC,GAAR,CAAYL,SAAZ,EACD,CALD,EAMCM,KAND,CAMO,SAAAC,GAAG,QAAEH,CAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAF,EANV,EAOH,CACJ,CAdD,CAeF,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAK7B,KAAL,EADJ,cAEI,YAAK,SAAS,uBAAiBE,UAAU,EAAI,kBAA/B,CAAd,UACKC,MAAM,CAAC2B,GAAP,CAAW,SAAAZ,KAAK,qBACb,YAAK,SAAS,CAAC,YAAf,CAA4B,OAAO,CAAE,kBAAI,CAACD,WAAW,CAACC,KAAD,CAAX,CAAmB,CAA7D,CAA+D,GAAG,WAAKpB,OAAL,SAAeI,UAAU,CAAIgB,KAAK,CAACa,WAAV,CAAwBb,KAAK,CAACc,aAAvD,CAAlE,CAA0I,GAAG,CAAEd,KAAK,CAACC,IAArJ,EADa,EAAhB,CADL,EAFJ,CAOEd,UAAU,eAAM,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAPlB,GADJ,CAWH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState,useEffect } from 'react'\r\nimport axios from \"./axios\"\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\"\r\nimport movieTrailer from \"movie-trailer\"\r\nconst baseURL=\"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({title,fetchURL,isLargeRow}) {\r\n    const [movies, setMovies] = useState([])\r\n    const [trailerURL, setTrailerURL] = useState(\"\")\r\n     useEffect(() => {\r\n       async function fetchData(){\r\n           const request=await axios.get(fetchURL)\r\n        //    console.log(request)\r\n           setMovies(request.data.results)\r\n           return request\r\n       }\r\n       fetchData()\r\n      \r\n    }, [fetchURL])\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n      const handleClick=(movie)=>{\r\n          \r\n          if(trailerURL){\r\n              setTrailerURL(\"\")\r\n          }\r\n          else{\r\n              movieTrailer(movie?.name || \"\")\r\n              .then((url)=>{\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerURL(urlParams.get('v'));\r\n                console.log(urlParams)\r\n              })\r\n              .catch(err=>console.log(err))\r\n          }\r\n      };\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n            <div className={`row_posters ${isLargeRow && \"row_poster_large\"}`}>\r\n                {movies.map(movie=>(\r\n                    <img className=\"row-poster\" onClick={()=>{handleClick(movie)}} src={`${baseURL}${isLargeRow ?  movie.poster_path : movie.backdrop_path}`} alt={movie.name}></img>\r\n                ))}\r\n            </div>\r\n         {trailerURL &&   <Youtube videoId={trailerURL} opts={opts}></Youtube>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}