{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchURL,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerURL, setTrailerURL] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchURL); //    console.log(request)\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    height: '390',\n    width: '640',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerURL) {\n      setTrailerURL(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerURL(urlParams.get('v'));\n        console.log(urlParams);\n      }).catch(err => console.log(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `row_posters ${isLargeRow && \"row_poster_large\"}`,\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"row-poster\",\n        onClick: () => {\n          handleClick(movie);\n        },\n        src: `${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), trailerURL && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerURL,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"El1rNDxgae4Ska+KIjJJpKJIUDM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["E:/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","baseURL","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerURL","setTrailerURL","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","err","map","poster_path","backdrop_path"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,MAAMC,OAAO,GAAC,sCAAd;;AACA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAb,EAA0C;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACCC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAC,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAApB,CADsB,CAEzB;;AACGG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AAEX,GATS,EASP,CAACN,QAAD,CATO,CAAT;AAUD,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,KAFE;AAGTC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHH,GAAb;;AAQE,QAAMC,WAAW,GAAEC,KAAD,IAAS;AAEvB,QAAGb,UAAH,EAAc;AACVC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAGI;AACAT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAO;AACX,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACD,OALD,EAMCM,KAND,CAMOC,GAAG,IAAEH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CANZ;AAOH;AACJ,GAdD;;AAeF,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAK7B;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAG,eAAcE,UAAU,IAAI,kBAAmB,EAAhE;AAAA,gBACKC,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBACb;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,OAAO,EAAE,MAAI;AAACD,UAAAA,WAAW,CAACC,KAAD,CAAX;AAAmB,SAA7D;AAA+D,QAAA,GAAG,EAAG,GAAEpB,OAAQ,GAAEI,UAAU,GAAIgB,KAAK,CAACa,WAAV,GAAwBb,KAAK,CAACc,aAAc,EAAvI;AAA0I,QAAA,GAAG,EAAEd,KAAK,CAACC;AAArJ;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,EAOEd,UAAU,iBAAM,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAPlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA/CQb,G;;KAAAA,G;AAiDT,eAAeA,GAAf","sourcesContent":["import React, { useState,useEffect } from 'react'\r\nimport axios from \"./axios\"\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\"\r\nimport movieTrailer from \"movie-trailer\"\r\nconst baseURL=\"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({title,fetchURL,isLargeRow}) {\r\n    const [movies, setMovies] = useState([])\r\n    const [trailerURL, setTrailerURL] = useState(\"\")\r\n     useEffect(() => {\r\n       async function fetchData(){\r\n           const request=await axios.get(fetchURL)\r\n        //    console.log(request)\r\n           setMovies(request.data.results)\r\n           return request\r\n       }\r\n       fetchData()\r\n      \r\n    }, [fetchURL])\r\n    const opts = {\r\n        height: '390',\r\n        width: '640',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n      const handleClick=(movie)=>{\r\n          \r\n          if(trailerURL){\r\n              setTrailerURL(\"\")\r\n          }\r\n          else{\r\n              movieTrailer(movie?.name || \"\")\r\n              .then((url)=>{\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerURL(urlParams.get('v'));\r\n                console.log(urlParams)\r\n              })\r\n              .catch(err=>console.log(err))\r\n          }\r\n      };\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n            <div className={`row_posters ${isLargeRow && \"row_poster_large\"}`}>\r\n                {movies.map(movie=>(\r\n                    <img className=\"row-poster\" onClick={()=>{handleClick(movie)}} src={`${baseURL}${isLargeRow ?  movie.poster_path : movie.backdrop_path}`} alt={movie.name}></img>\r\n                ))}\r\n            </div>\r\n         {trailerURL &&   <Youtube videoId={trailerURL} opts={opts}></Youtube>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}